package com.jme3.app;import com.jme3.input.*;import com.jme3.input.dummy.DummyKeyInput;import com.jme3.input.dummy.DummyMouseInput;import com.jme3.system.AppSettings;import com.jme3.system.NullContext;import org.junit.Before;import org.junit.Test;import java.util.List;import static org.hamcrest.core.Is.is;import static org.mockito.Mockito.*;import static org.junit.Assert.*;public class ApplicationTest {    Application app;    @Before    public void setUp() {        app = new TestApplication();    }    @Test    public void testInitInput() throws Exception {        //setup settings        AppSettings settings = new AppSettings(true);        app.setSettings(settings);        //setup app        Application spyApp = spy(app);        assertNull(spyApp.getInputManager());        //setup context        NullContext spyContext = spy(new NullContext());        spyApp.context = spyContext;        List<Input> expectedInputs = spyContext.getInput();        spyApp.initInput();        //verify        InputManager actualInputManager = spyApp.getInputManager();        List<Input> actualInputs = actualInputManager.getInputs();        assertNotNull(actualInputManager);        assertThat(actualInputs, is(expectedInputs));    }    /**     * Test from before the refactor. Should still pass     * @throws Exception     */    @Test    public void testInitInputNoJoyStick() throws Exception {        //setup settings        AppSettings settings = new AppSettings(true);        settings.setUseJoysticks(false);        app.setSettings(settings);        //setup app        Application spyApp = spy(app);        assertNull(spyApp.getInputManager());        //setup context        NullContext spyContext = spy(new NullContext());        MouseInput spyMouseInput = spy(new DummyMouseInput());        KeyInput spyKeyInput = spy(new DummyKeyInput());        TouchInput spyTouchInput = spy(new TestTouchInput());        JoyInput spyJoyInput = spy(new TestJoyInput());        doReturn(spyMouseInput).when(spyContext).getMouseInput();        doReturn(spyKeyInput).when(spyContext).getKeyInput();        doReturn(spyTouchInput).when(spyContext).getTouchInput();        doReturn(spyJoyInput).when(spyContext).getJoyInput();        spyApp.context = spyContext;        spyApp.initInput();        verify(spyContext, times(1)).getMouseInput();        verify(spyMouseInput, times(1)).initialize();        verify(spyContext, times(1)).getKeyInput();        verify(spyKeyInput, times(1)).initialize();        verify(spyContext, times(1)).getTouchInput();        verify(spyTouchInput, times(1)).initialize();        verify(spyContext, times(0)).getJoyInput();        verify(spyJoyInput, times(0)).initialize();        assertNotNull(spyApp.getInputManager());    }    /**     * Test from before the refactor. Should still pass     * @throws Exception     */    @Test    public void testInitInputWithJoyStick() throws Exception {        //setup settings        AppSettings settings = new AppSettings(true);        settings.setUseJoysticks(true);        app.setSettings(settings);        //setup app        Application spyApp = spy(app);        assertNull(spyApp.getInputManager());        //setup context        NullContext spyContext = spy(new NullContext());        MouseInput spyMouseInput = spy(new DummyMouseInput());        KeyInput spyKeyInput = spy(new DummyKeyInput());        TouchInput spyTouchInput = spy(new TestTouchInput());        JoyInput spyJoyInput = spy(new TestJoyInput());        doReturn(spyMouseInput).when(spyContext).getMouseInput();        doReturn(spyKeyInput).when(spyContext).getKeyInput();        doReturn(spyTouchInput).when(spyContext).getTouchInput();        doReturn(spyJoyInput).when(spyContext).getJoyInput();        spyApp.context = spyContext;        spyContext.setSettings(settings);        spyApp.initInput();        verify(spyContext, times(1)).getMouseInput();        verify(spyMouseInput, times(1)).initialize();        verify(spyContext, times(1)).getKeyInput();        verify(spyKeyInput, times(1)).initialize();        verify(spyContext, times(1)).getTouchInput();        verify(spyTouchInput, times(1)).initialize();        verify(spyContext, times(1)).getJoyInput();        verify(spyJoyInput, times(1)).initialize();        assertNotNull(spyApp.getInputManager());    }    @Test    public void testDestroyInput() throws Exception {        //setup settings        AppSettings settings = new AppSettings(true);        app.setSettings(settings);        //setup app        app.context = new NullContext();        InputManager spyInputManager = spy(new InputManager(app.getContext().getInput()));        app.setInputManager(spyInputManager);        assertNotNull(app.getInputManager());        app.destroyInput();        verify(spyInputManager, times(1)).destroyInput();        assertNull(app.getInputManager());    }}